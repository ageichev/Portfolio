{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from zipfile import ZipFile\n",
    "from io import BytesIO\n",
    "\n",
    "from datetime import timedelta\n",
    "from datetime import datetime\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "from airflow import DAG\n",
    "from airflow.operators.python import PythonOperator # Так как мы пишет такси в питоне"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "TOP_1M_DOMAINS = 'http://s3.amazonaws.com/alexa-static/top-1m.csv.zip'\n",
    "TOP_1M_DOMAINS_FILE = 'top-1m.csv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_data():\n",
    "    top_doms = requests.get(TOP_1M_DOMAINS, stream=True)\n",
    "    zipfile = ZipFile(BytesIO(top_doms.content))\n",
    "    top_data = zipfile.read(TOP_1M_DOMAINS_FILE).decode('utf-8')\n",
    "    \n",
    "    with open(TOP_1M_DOMAINS_FILE, 'w') as f:\n",
    "        f.write(top_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_stats():\n",
    "    top_data_df = pd.read_csv(TOP_1M_DOMAINS_FILE, names=['rank', 'domain'])\n",
    "    top_data_top_10  = top_data_df[top_data_df.domain.str.endswith('.ru')][:10]\n",
    "    with open('top_data_top_10.csv', 'w') as f:\n",
    "        f.write(top_data_top_10.to_csv(index=False, header=False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_data():\n",
    "    with open('top_data_top_10.csv', 'r') as f:\n",
    "        all_data = f.read()\n",
    "    print('Top domains in .Ru')\n",
    "    print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "default_args = {\n",
    "    'owner': 'your_name', # Владелец операции \n",
    "    'depends_on_past': False, # Зависимость от прошлых запусков\n",
    "\n",
    "    'schedule_interval': '0 12 * * *', # cron выражение, также можно использовать '@daily', '@weekly'\n",
    "    #'schedule_interval': '@daily' переменные airflow\n",
    "    #'schedule_interval': timedelta() параметр timedelta\n",
    "\n",
    "    'retries': 2, # Кол-во попыток выполнить DAG\n",
    "    'retry_delay': timedelta(minutes=5), # Промежуток между перезапусками\n",
    "\n",
    "    'email': '', # Почта для уведомлений \n",
    "    'email_on_failure': '', # Почта для уведомлений при ошибке\n",
    "    'email_on_retry': '', # Почта для уведомлений при перезапуске\n",
    "\n",
    "    'retry_exponential_backoff': '', # Для установления экспоненциального времени между перезапусками\n",
    "    'max_retry_delay': '', # Максимальный промежуток времени для перезапуска\n",
    "\n",
    "    'start_date': datetime(2021, 10, 7), # Дата начала выполнения DAG\n",
    "    'end_date': '', # Дата завершения выполнения DAG\n",
    "\n",
    "    'on_failure_callback': '', # Запустить функцию если DAG упал\n",
    "    'on_success_callback': '', # Запустить функцию если DAG выполнился\n",
    "    'on_retry_callback': '', # Запустить функцию если DAG ушел на повторный запуск\n",
    "    'on_execute_callback': '', # Запустить функцию если DAG начал выполняться\n",
    "     # Задать документацию\n",
    "    'doc': '',\n",
    "    'doc_md': '',\n",
    "    'doc_rst': '',\n",
    "    'doc_json': '',\n",
    "    'doc_yaml': ''\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "dag = DAG('DAG_name', default_args=default_args)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "t1 = PythonOperator(task_id = 'get_data',\n",
    "            python_callable= get_data, dag = dag)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "t2 = PythonOperator(task_id = 'get_stats',\n",
    "            python_callable = get_stats, dag = dag)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [],
   "source": [
    "t3 = PythonOperator(task_id = 'print_data',\n",
    "            python_callable = print_data, dag = dag)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Task(PythonOperator): print_data>"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t1 >> t2 >> t3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "#t1.set_downstream(t2)\n",
    "#t2.set_downstream(t3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
